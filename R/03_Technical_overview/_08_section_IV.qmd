---
title: "Section IV: Examples of usage"
format:
  html:
    fig-width: 10
  gfm:
    fig-width: 10
editor: 
  markdown: 
    wrap: sentence
---
```{r}
#| label: source config
#| include: FALSE
#| results: 'hide'
#| warning: FALSE
#| message: FALSE

library(here)

here::i_am("R/03_Technical_overview/_08_section_IV.qmd")

# Load configuration
source(
  here::here(
    "R/00_Config_file.R"
  )
)

source(
  here::here(
    "R/03_Technical_overview/00_Config_quarto.R"
  )
)

invisible(
  lapply(
    list.files(
      path = here::here("R/Functions"),
      pattern = "*.R",
      recursive = TRUE,
      full.names = TRUE
    ),
    source
  )
)
```

## Example 1

```{r}
#| label: Example 1 - setup
time_step <- 2500

open_vault <- function(path) {
  # test various things

  db_con <-
    DBI::dbConnect(
      RSQLite::SQLite(),
      path
    )

  dummy <-
    structure(
      list(
        data = tibble::tibble(),
        db_con = db_con
      ),
      class = c("list", "vault_pipe")
    )

  return(dummy)
}

get_datasets <- function(con) {
  sel_data <- con$data

  if (
    nrow(sel_data) > 0
  ) {
    stop("Vault already has some data. `get_datasets()` should be selected first")
  }

  # test various things
  sel_con <- con$db_con

  dat_res <-
    dplyr::tbl(sel_con, "Datasets")

  res <-
    structure(
      list(
        data = dat_res,
        db_con = sel_con
      ),
      class = c("list", "vault_pipe")
    )

  return(res)
}

select_dataset_by_type <- function(con, sel_type) {
  # test various things

  sel_data <- con$data

  sel_con <- con$db_con

  dat_res <-
    sel_data %>%
    dplyr::inner_join(
      dplyr::tbl(sel_con, "DatasetTypeID"),
      by = "dataset_type_id"
    ) %>%
    dplyr::filter(
      dataset_type %in% sel_type
    )

  res <-
    structure(
      list(
        data = dat_res,
        db_con = sel_con
      ),
      class = c("list", "vault_pipe")
    )

  return(res)
}

select_dataset_by_geo <- function(con, long_lim = c(-180, 180), lat_lim = c(-90, 90)) {
  # test various things
  sel_con <- con$db_con

  sel_data <- con$data


  long_lim_min <- as.numeric(eval(min(long_lim)))
  long_lim_max <- as.numeric(eval(max(long_lim)))

  lat_lim_min <- as.numeric(eval(min(lat_lim)))
  lat_lim_max <- as.numeric(eval(max(lat_lim)))


  assertthat::assert_that(
    all(c("coord_long", "coord_lat") %in% colnames(sel_data))
  )

  data_filter <-
    sel_data %>%
    dplyr::filter(!is.na(coord_long)) %>%
    dplyr::filter(!is.na(coord_lat))

  data_res <-
    data_filter %>%
    dplyr::filter(
      coord_long >= long_lim_min
    ) %>%
    dplyr::filter(
      coord_long <= long_lim_max
    ) %>%
    dplyr::filter(
      coord_lat >= lat_lim_min
    ) %>%
    dplyr::filter(
      coord_lat <= lat_lim_max
    )

  res <-
    structure(
      list(
        data = data_res,
        db_con = sel_con
      ),
      class = c("list", "vault_pipe")
    )

  return(res)
}

get_samples <- function(con) {
  # test various things
  sel_con <- con$db_con

  sel_data <- con$data

  data_res <-
    sel_data %>%
    dplyr::inner_join(
      dplyr::tbl(sel_con, "DatasetSample"),
      by = "dataset_id"
    ) %>%
    dplyr::inner_join(
      dplyr::tbl(sel_con, "Samples"),
      by = "sample_id"
    )

  res <-
    structure(
      list(
        data = data_res,
        db_con = sel_con
      ),
      class = c("list", "vault_pipe")
    )

  return(res)
}

get_taxa <- function(con) {
  # test various things
  sel_con <- con$db_con

  sel_data <- con$data

  data_res <-
    sel_data %>%
    dplyr::inner_join(
      dplyr::tbl(sel_con, "SampleTaxa"),
      by = "sample_id"
    )

  res <-
    structure(
      list(
        data = data_res,
        db_con = sel_con
      ),
      class = c("list", "vault_pipe")
    )

  return(res)
}

select_by_taxa <- function(con, sel_taxa) {
  # test various things
  sel_con <- con$db_con

  sel_data <- con$data

  data_res <-
    sel_data %>%
    dplyr::inner_join(
      dplyr::tbl(sel_con, "Taxa"),
      by = "taxon_id"
    ) %>%
    dplyr::filter(
      taxon_name %in% sel_taxa
    )

  res <-
    structure(
      list(
        data = data_res,
        db_con = sel_con
      ),
      class = c("list", "vault_pipe")
    )

  return(res)
}

harmonise_taxa <- function(con, to = c("original", "species", "genus", "family")) {
  # test various things
  sel_con <- con$db_con

  sel_data <- con$data

  to_long <- switch(to,
    species = "taxon_species",
    genus = "taxon_genus",
    family = "taxon_family",
  )

  data_class_sub <-
    dplyr::tbl(sel_con, "TaxonClassification") %>%
    dplyr::select(
      taxon_id,
      dplyr::all_of(to_long)
    ) %>%
    dplyr::rename(
      taxon_id_new = !!to_long
    )

  data_res <-
    sel_data %>%
    dplyr::inner_join(
      data_class_sub,
      by = "taxon_id"
    ) %>%
    dplyr::select(
      -taxon_id
    ) %>%
    dplyr::rename(
      taxon_id = taxon_id_new
    )

  res <-
    structure(
      list(
        data = data_res,
        db_con = sel_con
      ),
      class = c("list", "vault_pipe")
    )

  return(res)
}

extract_data <- function(con) {
  # test various things
  sel_data <- con$data

  sel_data %>%
    dplyr::collect() %>%
    return()
}
```

```{r}
#| label: Example 1 - North America Picea
#| echo: true
# create the plan
plan_na_plots_picea <-
  open_vault(
    path = paste0(
      data_storage_path,
      "Data/VegVault/VegVault.sqlite"
    )
  ) %>%
  get_datasets() %>%
  # select both modern and paleo plot data
  select_dataset_by_type(
    sel_type = c(
      "vegetation_plot",
      "fossil_pollen_archive"
    )
  ) %>%
  # limit data to North America
  select_dataset_by_geo(
    lat_lim = c(22, 60),
    long_lim = c(-135, -60)
  ) %>%
  get_samples() %>%
  get_taxa() %>%
  # Harmonise all data to a genus level
  harmonise_taxa(to = "genus") %>%
  # Extract only Picea data
  select_by_taxa(sel_taxa = c("Picea"))

# execute the plan
data_na_plots_picea <-
  extract_data(plan_na_plots_picea)
```

```{r}
#| label: Example 1 - plot

data_dummy <-
  tidyr::expand_grid(
    data_na_plots_picea %>%
      dplyr::distinct(coord_long, coord_lat),
    age_bin = seq(0, 15e3, time_step)
  )

fig_na_plots_picea <-
  data_na_plots_picea %>%
  dplyr::distinct(
    dataset_type, dataset_id, coord_long, coord_lat, sample_id, age
  ) %>%
  dplyr::filter(age >= 0 & age <= 15e3) %>%
  dplyr::mutate(
    age_bin = floor(age / time_step) * time_step
  ) %>%
  dplyr::mutate(
    age_bin_class = dplyr::case_when(
      .default = paste("paleo:", age_bin),
      dataset_type == "vegetation_plot" ~ "modern",
    ),
    age_bin_class = factor(age_bin_class,
      levels = c("modern", paste("paleo:", seq(0, 15e3, time_step)))
    )
  ) %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = coord_long,
      y = coord_lat,
    )
  ) +
  ggplot2::borders(
    fill = "grey80"
  ) +
  ggplot2::geom_point(
    data = data_dummy,
    shape = 20,
    size = 1,
    col = "grey50",
  ) +
  ggplot2::geom_point(
    col = "blue",
    size = 1
  ) +
  ggplot2::facet_wrap(
    ~age_bin_class
  ) +
  ggplot2::theme_minimal() +
  ggplot2::coord_quickmap(
    xlim = c(-135, -60),
    ylim = c(22, 60)
  )

fig_na_plots_picea
```

## Example 2

## Example 3