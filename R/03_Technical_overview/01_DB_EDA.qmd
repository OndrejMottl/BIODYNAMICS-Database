---
title: "VegVault database"
date: last-modified
author: OndÅ™ej Mottl
output:
  html_document:
    toc: yes
    toc_float: yes
    fig-width: 10
    self_contained: yes
    embed-resources: true
  pdf_document:
    toc: yes
    toc_depth: 3
    fig-width: 10
editor: 
  markdown: 
    wrap: sentence
---

```{r}
#| label: chunk setup
#| include: FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  fig.align = "center",
  fig.path = "figures/"
)
```

```{r}
#| label: source config
#| include: FALSE
#| results: 'hide'
#| warning: FALSE
#| message: FALSE

library(here)

here::i_am("R/03_Technical_overview/01_DB_EDA.qmd")

# Load configuration
source(
  here::here(
    "R/00_Config_file.R"
  )
)

source(
  here::here(
    "R/03_Technical_overview/00_Config_quarto.R"
  )
)

invisible(
  lapply(
    list.files(
      path = here::here("R/Functions"),
      pattern = "*.R",
      recursive = TRUE,
      full.names = TRUE
    ),
    source
  )
)
```

{{< include _01_section_I.md >>}}

{{< include _02_section_II_datasets.md >>}}

## Samples

`Sample` represents the main unit of data in the **VegVault** database. 

```{r}
#| label: Samples scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/Samples.png"
  )
)
```

### Dataset-Sample

First `Samples` are linked to `Datasets` via the `Dataset-Sample` table.

```{r}
#| label: DatasetSample scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/DatasetSample.png"
  )
)
```

```{r}
#| label: Number of samples plot
n_samples_per_dataset_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples"),
    by = "sample_id"
  ) %>%
  dplyr::distinct(dataset_type, sample_id) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

plot_waffle(
  n_samples_per_dataset_type,
  dataset_type,
  plot_title = "Number of samples per Dataset type",
  one_point_is = 25e3
) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  )

plot_waffle(
  n_samples_per_dataset_type %>%
    dplyr::filter(
      dataset_type != "gridpoints"
    ),
  dataset_type,
  plot_title = "Number of samples per Dataset type - no gridpoints",
  one_point_is = 25e3
) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  )
```

### Sample-size

Vegetation plots can have different sizes, which can have a huge impact on analyses. Therefore, the information about the plot is saved separately. 

```{r}
#| label: SampleSizeID scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/SampleSizeID.png"
  )
)
```

```{r}
#| label: plot-size plot
plot_size_types <-
  dplyr::tbl(con, "SampleSizeID") %>%
  dplyr::distinct(description) %>%
  dplyr::collect()

if (
  nrow(plot_size_types) == 1
) {
  data_samples_plot_size <-
    dplyr::inner_join(
      dplyr::tbl(con, "Datasets"),
      dplyr::tbl(con, "DatasetTypeID"),
      by = "dataset_type_id"
    ) %>%
    dplyr::filter(
      dataset_type == "vegetation_plot"
    ) %>%
    dplyr::inner_join(
      dplyr::tbl(con, "DatasetSample"),
      by = "dataset_id"
    ) %>%
    dplyr::inner_join(
      dplyr::tbl(con, "Samples"),
      by = "sample_id"
    ) %>%
    dplyr::left_join(
      dplyr::tbl(con, "SampleSizeID"),
      by = "sample_size_id"
    ) %>%
    dplyr::select(sample_size) %>%
    dplyr::collect()

  data_samples_plot_size %>%
    ggplot2::ggplot(
      ggplot2::aes(
        x = sample_size,
      )
    ) +
    ggplot2::scale_x_continuous(
      trans = "log10"
    ) +
    ggplot2::scale_y_continuous(
      trans = "log10",
      breaks = scales::trans_breaks("log10", function(x) 10^x),
      labels = scales::trans_format("log10", scales::math_format(10^.x))
    ) +
    ggplot2::labs(
      title = "Vegetation plot size",
      x = paste0("plot size (", plot_size_types$description, ")"),
      y = "Number of Samples"
    ) +
    ggplot2::geom_histogram(
      fill = "grey50",
      col = NA,
      bins = 15
    )
}
```

### Sample age

The **Vegvault** database deals with both current and paleo data. therefore, each `Sample` has the indication of *age*, with modern samples being set to 0. To embrace the uncertainty from age-depth modeling paleo-record, the **Vegvault** database has a structure to hold an uncertainty matrix containing information about all *potential ages* of each `Sample` from a paleo `Dataset`. 

```{r}
#| label: SampleUncertainty scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/SampleUncertainty.png"
  )
)
```

We can show this on the previously selected fossil pollen archive with dataset ID: `r as.character(sel_dataset_for_example)`.

```{r}
#| label: Sample poential age - plot
dataset_age_example <-
  dplyr::tbl(con, "Datasets") %>%
  dplyr::filter(dataset_id == sel_dataset_for_example) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples"),
    by = "sample_id"
  ) %>%
  dplyr::distinct(sample_id, age) %>%
  dplyr::collect()

dataset_age_example_iterations <-
  dplyr::tbl(con, "Datasets") %>%
  dplyr::filter(dataset_id == sel_dataset_for_example) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples"),
    by = "sample_id"
  ) %>%
  dplyr::distinct(sample_id) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "SampleUncertainty"),
    by = "sample_id"
  ) %>%
  dplyr::select(
    sample_id,
    age_it = age
  ) %>%
  dplyr::collect()

dplyr::left_join(
  dataset_age_example_iterations,
  dataset_age_example,
  by = "sample_id"
) %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      y = age,
      group = as.factor(age),
      x = age_it
    )
  ) +
  ggplot2::coord_fixed() +
  ggplot2::labs(
    title = paste0(
      "Dataset ID:",
      as.character(sel_dataset_for_example)
    ),
    y = "Sample age (cal yr BP)",
    x = "Potential age of Samples (cal yr BP)"
  ) +
  ggplot2::geom_boxplot(
    outlier.shape = NA
  )

```

### Sample reference

Individual `Sample` can have specific references on top of the reference to `Dataset`

```{r}
#| label: SampleReference scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/SampleReference.png"
  )
)
```

## Taxa

The **Vegvault** database contains taxa names directly from main *Data Source-types*. 

```{r}
#| label: Taxa scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/Taxa.png"
  )
)
```

Individual taxa names are linked to the `Samples` by the `SampleTaxa` table. 

```{r}
#| label: SampleTaxa scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/SampleTaxa.png"
  )
)
```

```{r}
#| label: Number of taxa per data source type
n_taxa_per_source_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::filter(
    dataset_type == "vegetation_plot"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourceTypeID"),
    by = "data_source_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples"),
    by = "sample_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "SampleTaxa"),
    by = "sample_id"
  ) %>%
  dplyr::distinct(dataset_source_type, taxon_id) %>%
  dplyr::group_by(dataset_source_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

n_taxa_per_source_type %>%
  dplyr::arrange(-N) %>%
  dplyr::mutate(
    dataset_source_type = factor(
      dataset_source_type,
      levels = unique(dataset_source_type)
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = dataset_source_type
    )
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Taxa per source type",
    x = "",
    y = "Number of taxa"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_source_type
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = dataset_source_type,
      xend = dataset_source_type,
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = dataset_source_type
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )
```

### Classification

In order to obtain classification of all taxa present in the **Vegvault** database, the {[taxospace](https://github.com/OndrejMottl/taxospace)} R package has been utilized, automatically aligning the names to [Taxonomy Backbone](https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c) from [Global Biodiversity Information Facility](https://www.gbif.org/).

Classification up to the family level is then saved for each taxon.

```{r}
#| label: TaxonClassification scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/TaxonClassification.png"
  )
)
```

```{r}
#| label: taxa classification plot
get_n_taxa_per_level <- function(sel_level) {
  dplyr::tbl(con, "TaxonClassification") %>%
    dplyr::distinct({{ sel_level }}) %>%
    dplyr::collect() %>%
    nrow() %>%
    return()
}

n_taxa_total <-
  dplyr::tbl(con, "Taxa") %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  purrr::chuck("N")

n_taxa_not_classificed <-
  dplyr::left_join(
    dplyr::tbl(con, "Taxa"),
    dplyr::tbl(con, "TaxonClassification"),
    by = "taxon_id"
  ) %>%
  dplyr::filter(
    is.na(taxon_species) &
      is.na(taxon_genus) &
      is.na(taxon_family)
  ) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  purrr::chuck("N")

n_taxa_per_class <-
  tibble::tribble(
    ~class, ~N,
    "total taxa", n_taxa_total,
    "species", get_n_taxa_per_level(taxon_species),
    "genus", get_n_taxa_per_level(taxon_genus),
    "family", get_n_taxa_per_level(taxon_family),
    "not classified", n_taxa_not_classificed
  )

n_taxa_per_class %>%
  dplyr::mutate(
    class = factor(
      class,
      levels = n_taxa_per_class$class
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = class
    )
  ) +
  ggplot2::labs(
    title = "Taxa classification",
    x = "",
    y = "Number of taxa"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::scale_fill_manual(
    values = c(
      "#FCFCFC",
      "#FFE6F5",
      "#FFDEC9",
      "#FFE593",
      "#D8DBE0"
    )
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = class,
      xend = class,
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = class
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )
```

## Traits

Functional traits of vegetation taxa follow the same structure of `Dataset` and `Samples` obtained directly from *Dataset Source-types*.

```{r}
#| label: Traits scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/Traits.png"
  )
)
```

### Trait domain

As there are many varying names for the same "traits", the **Vegvault** database contains *Trait Domain* information to group traits together.  

```{r}
#| label: TraitsDomain scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/TraitsDomain.png"
  )
)
```

There are currently 6 trait domains following the [Diaz et al. (2016)](https://www.nature.com/articles/nature16489)

```{r}
#| label: show trait domains
dplyr::tbl(con, "TraitsDomain") %>%
  dplyr::distinct(trait_domain_name) %>%
  dplyr::collect() %>%
  rlang::set_names(
    nm = "Trait domain"
  ) %>%
  tinytable::tt()
```

```{r}
#| label: trait per domain plot

n_traits_per_domain <-
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsDomain"),
    dplyr::tbl(con, "Traits"),
    by = "trait_domain_id"
  ) %>%
  dplyr::distinct(trait_domain_name, trait_name) %>%
  dplyr::group_by(trait_domain_name) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

n_traits_per_domain %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = trait_domain_name
    )
  ) +
  ggplot2::labs(
    title = "Trait domains",
    x = "",
    y = "Number of traits"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::scale_fill_manual(
    values = palette_trait_dommanins
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = trait_domain_name,
      xend = trait_domain_name,
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = trait_domain_name
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )

```

### Trait Values

To store a trait value, information needs to be linked among `Dataset`, `Sample`, `Taxa`, and `Trait`.

```{r}
#| label: TraitsValue scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/TraitsValue.png"
  )
)
```

```{r}
#| label: trait value occurences plot

n_occurences_per_dommain <-
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsDomain"),
    dplyr::tbl(con, "Traits"),
    by = "trait_domain_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsValue"),
    by = "trait_id"
  ) %>%
  dplyr::group_by(trait_domain_name) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

n_occurences_per_dommain %>%
  dplyr::arrange(-N) %>%
  dplyr::mutate(
    trait_domain_name = factor(
      trait_domain_name,
      levels = unique(trait_domain_name)
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = trait_domain_name
    )
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Occurences of trait values",
    x = "",
    y = "Number of occurrences (values)"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::scale_fill_manual(
    values = palette_trait_dommanins
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = trait_domain_name,
      xend = trait_domain_name,
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = trait_domain_name
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )
```

### Trait reference

For full clarity, on top of `Dataset` and `Sample`, each `Trait` can have additional references.

```{r}
#| label: TraitsReference scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/TraitsReference.png"
  )
)
```

## Abiotic data

Abiotic data is aimed to provide information about all relevant abiotic information affecting vegetation distribution and its traits.

Abiotic data is linked to the structure of the **VegVault** Database by the `gridpoints`, which are artificially created points to *reasonably* cover the resolution of both modern and past data for vegetation and abiotic data.

```{r}
#| label: distribution of gridpoints
x_lim <- c(12, 18.9)
y_lim <- c(48.5, 51.1)

data_grid_coord <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::filter(dataset_type == "gridpoints") %>%
  # this needs to be hardcoded as SQL cannot cope with code imputed values
  dplyr::filter(
    coord_long >= 12 & coord_long <= 18.9
  ) %>%
  dplyr::filter(
    coord_lat >= 48.5 & coord_lat <= 51.1
  )


data_grid_coord %>%
  dplyr::collect() %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = coord_long,
      y = coord_lat
    )
  ) +
  ggplot2::coord_quickmap(
    xlim = x_lim,
    ylim = y_lim
  ) +
  ggplot2::labs(
    title = "Example of gridpoinds resolution",
    x = "Longtitude",
    y = "Latitude"
  ) +
  ggplot2::borders(
    fill = NA,
    col = "red"
  ) +
  ggplot2::geom_point(
    shape = 20,
    size = 0.5,
    alpha = 0.75
  )

```


There are currently abiotic from [CHELSA](https://chelsa-climate.org/) and [CHELSA-TRACE21](https://chelsa-climate.org/chelsa-trace21k/) and [WoSIS](https://www.isric.org/explore/wosis). CHELSA and CHELSA-TRACE21 are built on the same structure of variables (visit the websites for more info).

```{r}
#| label: show abitotic variables
dplyr::tbl(con, "AbioticVariable") %>%
  dplyr::select(abiotic_variable_name, abiotic_variable_unit, measure_details) %>%
  dplyr::collect() %>%
  rlang::set_names(
    nm = c(
      "Variable name",
      "Variable unit",
      "source of data"
    )
  ) %>%
  tinytable::tt()
```

Abiotic data is simply linked to `Samples`.

```{r}
#| label: AbioticData scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/AbioticData.png"
  )
)
```

```{r}
#| label: exampe of abitic data - bio1
data_bio1_example <-
  data_grid_coord %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples") %>%
      dplyr::filter(age == 0 | age == 500 | age == 8000),
    by = "sample_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "AbioticData") %>%
      dplyr::filter(abiotic_variable_id == 1),
    by = "sample_id"
  ) %>%
  dplyr::collect()

data_bio1_example %>%
  dplyr::select(coord_long, coord_lat, age, value) %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = coord_long,
      y = coord_lat
    )
  ) +
  ggplot2::coord_quickmap(
    xlim = x_lim,
    ylim = y_lim
  ) +
  ggplot2::labs(
    title = stringr::str_wrap("Example Mean Annual temprateture at diferent age slices (cal yr BP)", fig_width_def),
    x = "Longtitude",
    y = "Latitude",
    col = "Temperature (Â°C)",
    fill = "Temperature (Â°C)"
  ) +
  ggplot2::facet_wrap(~age, nrow = 3) +
  ggplot2::scale_fill_viridis_c() +
  ggplot2::scale_color_viridis_c() +
  ggplot2::theme(
    legend.position = "bottom"
  ) +
  ggplot2::borders(
    fill = NA,
    col = "red"
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = value,
      col = value
    ),
    alpha = 0.75,
    size = 0.1
  )

```

Note that the spatial resolution is higher for modern climate data than for the past. this is to reduce the size of the past climate data.

```{r}
#| label: exampe of abitic data - soil
data_soil_example <-
  data_grid_coord %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples") %>%
      dplyr::filter(age == 0),
    by = "sample_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "AbioticData") %>%
      dplyr::filter(abiotic_variable_id == 8),
    by = "sample_id"
  ) %>%
  dplyr::collect()

data_soil_example %>%
  dplyr::select(coord_long, coord_lat, age, value) %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      x = coord_long,
      y = coord_lat
    )
  ) +
  ggplot2::coord_quickmap(
    xlim = x_lim,
    ylim = y_lim
  ) +
  ggplot2::labs(
    title = "Example of soil types",
    x = "Longtitude",
    y = "Latitude",
    col = "Soit type ID",
    fill = "Soil type ID"
  ) +
  ggplot2::facet_wrap(~age, nrow = 3) +
  ggplot2::theme(
    legend.position = "none"
  ) +
  ggplot2::borders(
    fill = NA,
    col = "red"
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = as.factor(value),
      col = as.factor(value)
    ),
    alpha = 1,
    size = 0.2
  )
```

# Section III: Assembly details of VegVault 1.0.0

WIP

# Section IV: Examples of usage

WIP

## Example 1: 

WIP

## Example 2: 

WIP

## Example 3: 

WIP

# Section V: Outlook and future directions

WIP