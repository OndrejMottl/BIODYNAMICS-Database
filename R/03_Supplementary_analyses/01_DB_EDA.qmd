---
title: "VegVault database"
date: last-modified
author: OndÅ™ej Mottl
output:
  html_document:
    toc: yes
    toc_float: yes
    fig-width: 10
    self_contained: yes
  pdf_document:
    toc: yes
    toc_depth: 3
    fig-width: 10
editor: 
  markdown: 
    wrap: sentence
---

```{r}
#| label: chunk setup
#| include: FALSE
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  echo = FALSE,
  message = FALSE,
  warning = FALSE,
  fig.align = "center",
  fig.path = "figures/"
)
```

```{r}
#| label: source config
#| include: FALSE
#| results: 'hide'
#| warning: FALSE
#| message: FALSE

library(here)

here::i_am("R/03_Supplementary_analyses/01_DB_EDA.qmd")

# Load configuration
source(
  here::here(
    "R/00_Config_file.R"
  )
)

invisible(
  lapply(
    list.files(
      path = here::here("R/Functions"),
      pattern = "*.R",
      recursive = TRUE,
      full.names = TRUE
    ),
    source
  )
)
```

```{r}
#| label: chunk theme
#| include: FALSE
ggplot2::theme_set(
  ggplot2::theme_bw() +
    ggplot2::theme(
      plot.title = ggplot2::element_text(size = 15),
      axis.title = ggplot2::element_text(size = 15),
      axis.text = ggplot2::element_text(size = 15),
      strip.text = ggplot2::element_text(size = 15),
      panel.grid = ggplot2::element_blank()
    )
)

fig_width_def <- 60 # this is used to wrap text.

#' @description
#' A helper function to colour the facets
color_facets <-
  function(sel_plot,
           sel_palette,
           direction = c("vertical", "horizontal"),
           return_raw = FALSE) {
    direction <- match.arg(direction)
    g <-
      ggplot2::ggplot_gtable(
        ggplot2::ggplot_build(sel_plot)
      )
    stripr <-
      which(grepl("strip-t", g$layout$name))

    for (i in seq_along(stripr)) {
      obejct_val <-
        sort(stripr,
          decreasing = ifelse(direction == "vertical",
            TRUE,
            FALSE
          )
        )[i]

      j <-
        which(grepl("rect", g$grobs[[obejct_val]]$grobs[[1]]$childrenOrder))

      g$grobs[[obejct_val]]$grobs[[1]]$children[[j]]$gp$fill <-
        sel_palette[i]
    }

    if (
      return_raw == TRUE
    ) {
      return(g)
    } else {
      grid::grid.draw(g)
    }
  }
```

```{r}
#| label: connect to DB

con <-
  DBI::dbConnect(
    RSQLite::SQLite(),
    paste0(
      data_storage_path,
      "Data/VegVault/VegVault.sqlite"
    )
  )
```

# Section I: Description of VegVaul

**VegVault** is a SQLite interdisciplinary database linking plot-based vegetation data with functional traits and climate. Specifically, it contains:

 - current vegetation plot data
 - past vegetation plot data (fossil pollen records)
 - functional trait data
 - current abiotic data (climate, soil)
 - past abiotic data (climate)

The goal of the database is to compilate interdisciplinary data ...


# Section II: Overview of VegVault 1.0.0

The database is structured in several logical levels, such as `Dataset`, `Sample`, `Taxa`, `Trait`, etc. 

## Dataset

`Dataset` represents the highest levels in the hierarchy. It is the main keystone in the VegVauls structure. 

```{r}
#| label: Dataset scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/Datasets.png"
  )
)
```

### Dataset Type

`dataset_type_id` defines the basic type of a dataset. This is the highest level of classification of the data

Currently, there **VegVault** consist of those types:

* **vegetation_plot** -  current vegetation plot dataset
* **fossil_pollen_archive** - past vegetation plot dataset
* **traits** - dataset containing functional traits
* **gridpoints** - artificially created dataset to hold abiotic data 

```{r}
#| label: Dataset Type scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/DatasetTypeID.png"
  )
)
```

```{r}
#| label: Dataset type - plots
n_datasetes_per_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

plot_waffle(
  n_datasetes_per_type,
  dataset_type,
  plot_title = "Datasets type",
  one_point_is = 1e3
)

n_datasetes_per_type %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = reorder(dataset_type, -N)
    )
  ) +
  ggplot2::scale_y_continuous(
    trans = "log10",
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Datasets type",
    x = "",
    y = "Number of datasets"
  ) +
  ggplot2::geom_segment(
    ggplot2::aes(
      xend = dataset_type,
      yend = 0
    ),
    color = "grey"
  ) +
  ggplot2::geom_point(
    size = 3,
    shape = 21,
    col = "black",
    fill = "white"
  ) +
  ggplot2::geom_label(
    ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3
  )
```

### Dataset Source-Type

`dataset_source_type_id` defines the general provider of the dataset. This should help to classify, which data pipeline was used to import the dataset into the **VegVault**, This is also the first general point of reference of data, as all large databases have a citation statement.

Currently, there **VegVault** consist of those source-types:

* **BIEN** - [Botanical Information and Ecology Network](https://bien.nceas.ucsb.edu/bien/)
* **sPlotOpen** - [The open-access version of sPlot](https://idiv-biodiversity.de/en/splot/splotopen.html)
* **TRY** - [TRY Plant Trait Database](https://www.try-db.org/TryWeb/Home.php)
* **FOSSILPOL** - [The workflow that aims to process and standardise global palaeoecological pollen data](https://hope-uib-bio.github.io/FOSSILPOL-website/) 
* **gridpoints** - artificially created dataset to hold abiotic data 

```{r}
#| label: Dataset Source Type scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/DatasetSourceTypeID.png"
  )
)
```

```{r}
#| label: dataset source type - plots
n_datasetes_per_source_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetSourceTypeID"),
    by = "data_source_type_id"
  ) %>%
  dplyr::group_by(dataset_source_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

plot_waffle(
  n_datasetes_per_source_type,
  dataset_source_type,
  plot_title = "Datasets source type",
  one_point_is = 1e3
)

n_datasetes_per_type_per_source_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourceTypeID"),
    by = "data_source_type_id"
  ) %>%
  dplyr::group_by(dataset_type, dataset_source_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

n_datasetes_per_type_per_source_type %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::mutate(
    n_datasetes_per_type = sum(N)
  ) %>%
  dplyr::ungroup() %>%
  dplyr::arrange(-n_datasetes_per_type, -N) %>%
  dplyr::mutate(
    dataset_type = factor(
      dataset_type,
      levels = unique(dataset_type)
    ),
    dataset_source_type = factor(
      dataset_source_type,
      levels = unique(dataset_source_type)
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = dataset_source_type # reorder(dataset_source_type, -N)
    )
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Datasets type per source type",
    x = "",
    y = "Number of datasets"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::facet_wrap(~dataset_type, nrow = 1, scales = "free_x") +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = dataset_source_type, # reorder(dataset_source_type, -N),
      xend = dataset_source_type, # reorder(dataset_source_type, -N),
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = dataset_source_type
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )
```

### Dataset Source

Each individual dataset from a specific *Data Source-Type* can have information on the source of the data (i.e. sub-database). This should help to promote better findability of the primary source of data and referencing.

```{r}
#| label: Dataset Source ID scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/DatasetSourcesID.png"
  )
)
```

```{r}
#| label: Dataset ID
n_dataset_sources <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourcesID"),
    by = "data_source_id"
  ) %>%
  dplyr::distinct(dataset_type, data_source_desc) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

n_total_sources <-
  sum(n_dataset_sources$N)

n_datasetes_per_source <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourcesID"),
    by = "data_source_id"
  ) %>%
  dplyr::group_by(dataset_type, data_source_desc) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup() %>%
  tidyr::drop_na(data_source_desc)
```

Currently, there are `r n_total_sources` sources of datasets.

```{r}
#| label: Dataset ID - plots
n_datasetes_per_source %>%
  ggplot2::ggplot(
    ggplot2::aes(
      x = dataset_type,
      y = N,
      fill = dataset_type
    )
  ) +
  ggplot2::geom_violin(
    col = NA
  ) +
  ggplot2::geom_boxplot(
    width = 0.2,
    fill = "white",
    col = "gray50",
    outlier.shape = NA
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Number of sources per Dataset-Type",
    y = "Number of sources",
    x = ""
  )
```

### Sampling method

Some datasets may differ in the way they have been sampled. This could be represented by different ways vegetation data have been sampled for *Dataset Type* of `vegetation_plot`, or depositional environment for *Dataset Type* of `fossil_pollen_archive`.

```{r}
#| label: Dataset Sampling method scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/SamplingMethodID.png"
  )
)
```

```{r}
#| label: Dataset Sampling method - plots
n_sampling_methods_per_dataset_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "SamplingMethodID"),
    by = "sampling_method_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::distinct(dataset_type, sampling_method_details) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

plot_waffle(
  n_sampling_methods_per_dataset_type,
  dataset_type,
  plot_title = "Number of Sampling method per Datasets type",
  one_point_is = 1
)
```

### References

*Dataset Source-Type*, *Dataset Source*, and *Sampling Method* can have their own references. Moreover, each dataset can have one or more references directly to that specific data.

```{r}
#| label: Dataset reference method scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/DatasetReference.png"
  )
)
```

This means that one dataset can have one/several references from each of those parts. Let's take a look at an example, of what that could mean in practice.

```{r}
#| label: Dataset reference example

sel_dataset_for_example <- 91256

dataset_ref_example <-
  dplyr::tbl(con, "Datasets") %>%
  dplyr::filter(dataset_id == sel_dataset_for_example) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourceTypeReference"),
    by = "data_source_type_id"
  ) %>%
  dplyr::left_join(
    dplyr::tbl(con, "References"),
    by = "reference_id"
  ) %>%
  dplyr::rename(
    source_type_ref = reference_detail
  ) %>%
  dplyr::select(-reference_id) %>%
  dplyr::left_join(
    dplyr::tbl(con, "SamplingMethodReference"),
    by = "sampling_method_id"
  ) %>%
  dplyr::left_join(
    dplyr::tbl(con, "References"),
    by = "reference_id"
  ) %>%
  dplyr::rename(
    sampling_method_ref = reference_detail
  ) %>%
  dplyr::select(-reference_id) %>%
  dplyr::left_join(
    dplyr::tbl(con, "DatasetSourcesReference"),
    by = "data_source_id"
  ) %>%
  dplyr::left_join(
    dplyr::tbl(con, "References"),
    by = "reference_id"
  ) %>%
  dplyr::rename(
    source_ref = reference_detail
  ) %>%
  dplyr::select(-reference_id) %>%
  dplyr::collect()

```

We have selected dataset ID: `r as.character(sel_dataset_for_example)`, which is a fossil pollen archive. Therefore, it has the reference of the *Dataser Source-Type*: *`r dataset_ref_example$source_type_ref`* and reference for the individual dataset: *`r dataset_ref_example$source_ref`*

## Samples

`Sample` represents the main unit of data in the **VegVault** database. 

```{r}
#| label: Samples scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/Samples.png"
  )
)
```

### Dataset-Sample

First `Samples` are linked to `Datasets` via the `Dataset-Sample` table.

```{r}
#| label: DatasetSample scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/DatasetSample.png"
  )
)
```

```{r}
#| label: Number of samples plot
n_samples_per_dataset_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples"),
    by = "sample_id"
  ) %>%
  dplyr::distinct(dataset_type, sample_id) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

plot_waffle(
  n_samples_per_dataset_type,
  dataset_type,
  plot_title = "Number of samples per Dataset type",
  one_point_is = 10e3
)
```

### Sample-size

Vegetation plots can have different sizes, which can have a huge impact on analyses. Therefore, the information about the plot is saved separately. 

```{r}
#| label: SampleSizeID scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/SampleSizeID.png"
  )
)
```

```{r}
#| label: plot-size plot
plot_size_types <-
  dplyr::tbl(con, "SampleSizeID") %>%
  dplyr::distinct(description) %>%
  dplyr::collect()

if (
  nrow(plot_size_types) == 1
) {
  data_samples_plot_size <-
    dplyr::inner_join(
      dplyr::tbl(con, "Datasets"),
      dplyr::tbl(con, "DatasetTypeID"),
      by = "dataset_type_id"
    ) %>%
    dplyr::filter(
      dataset_type == "vegetation_plot"
    ) %>%
    dplyr::inner_join(
      dplyr::tbl(con, "DatasetSample"),
      by = "dataset_id"
    ) %>%
    dplyr::inner_join(
      dplyr::tbl(con, "Samples"),
      by = "sample_id"
    ) %>%
    dplyr::left_join(
      dplyr::tbl(con, "SampleSizeID"),
      by = "sample_size_id"
    ) %>%
    dplyr::select(sample_size) %>%
    dplyr::collect()

  data_samples_plot_size %>%
    ggplot2::ggplot(
      ggplot2::aes(
        x = sample_size,
      )
    ) +
    ggplot2::scale_x_continuous(
      trans = "log10"
    ) +
    ggplot2::scale_y_continuous(
      trans = "log10",
      breaks = scales::trans_breaks("log10", function(x) 10^x),
      labels = scales::trans_format("log10", scales::math_format(10^.x))
    ) +
    ggplot2::labs(
      title = "Vegetation plot size",
      x = paste0("plot size (", plot_size_types$description, ")"),
      y = "Number of Samples"
    ) +
    ggplot2::geom_histogram(
      fill = "grey50",
      col = NA,
      bins = 15
    )
}
```

### Sample age

The **Vegvault** database deals with both current and paleo data. therefore, each *Sample* has indication of *age*, wich modern samples being set to 0. To embrace the uncertainty from age-depth modeling paleo-record, the **Vegvault** database has a structure to hold an uncertainty matrix containing information about all *potential ages* of each *Sample* from a paleo *Dataset*. 

```{r}
#| label: SampleUncertainty scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/SampleUncertainty.png"
  )
)
```

We can show this on the previously selected fossil pollen archive with dataset ID: `r as.character(sel_dataset_for_example)`.

```{r}
#| label: Sample poential age - plot
dataset_age_example <-
  dplyr::tbl(con, "Datasets") %>%
  dplyr::filter(dataset_id == sel_dataset_for_example) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples"),
    by = "sample_id"
  ) %>%
  dplyr::distinct(sample_id, age) %>%
  dplyr::collect()

dataset_age_example_iterations <-
  dplyr::tbl(con, "Datasets") %>%
  dplyr::filter(dataset_id == sel_dataset_for_example) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples"),
    by = "sample_id"
  ) %>%
  dplyr::distinct(sample_id) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "SampleUncertainty"),
    by = "sample_id"
  ) %>%
  dplyr::select(
    sample_id,
    age_it = age
  ) %>%
  dplyr::collect()

dplyr::left_join(
  dataset_age_example_iterations,
  dataset_age_example,
  by = "sample_id"
) %>%
  ggplot2::ggplot(
    mapping = ggplot2::aes(
      y = age,
      group = as.factor(age),
      x = age_it
    )
  ) +
  ggplot2::coord_fixed() +
  ggplot2::labs(
    title = paste0(
      "Dataset ID:",
      as.character(sel_dataset_for_example)
    ),
    y = "Sample age (cal yr BP)",
    x = "Potential age of Samples (cal yr BP)"
  ) +
  ggplot2::geom_boxplot(
    outlier.shape = NA
  )

```

### Sample reference

Individual *Samples* can have specific references on top of the reference to *Dataset*

```{r}
#| label: SampleReference scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/SampleReference.png"
  )
)
```

## Taxa

The **Vegvault** database contais taxa names dirrectly from main *Data Source-types*. 

```{r}
#| label: Taxa scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/Taxa.png"
  )
)
```

Individual taxa names are linked to the *Samples* by *SampleTaxa* table. 

```{r}
#| label: SampleTaxa scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/SampleTaxa.png"
  )
)
```

```{r}
#| label: Number of taxa per data souce type
n_taxa_per_source_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::filter(
    dataset_type == "vegetation_plot"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourceTypeID"),
    by = "data_source_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSample"),
    by = "dataset_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "Samples"),
    by = "sample_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "SampleTaxa"),
    by = "sample_id"
  ) %>%
  dplyr::distinct(dataset_source_type, taxon_id) %>%
  dplyr::group_by(dataset_source_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()


n_taxa_per_source_type %>%
  dplyr::arrange(-N) %>%
  dplyr::mutate(
    dataset_source_type = factor(
      dataset_source_type,
      levels = unique(dataset_source_type)
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = dataset_source_type
    )
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Taxa per source type",
    x = "",
    y = "Number of taxa"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = dataset_source_type,
      xend = dataset_source_type,
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = dataset_source_type
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )
```

### Classification

In order to obtain classification of all taxa present in the **Vegvault** database, the {[taxospace](https://github.com/OndrejMottl/taxospace)} R package has been utilized, automatically aligning the names to [Taxonomy Backbone](https://www.gbif.org/dataset/d7dddbf4-2cf0-4f39-9b2a-bb099caae36c) from [Global Biodiversity Information Facility](https://www.gbif.org/).

Classification up to the family level is then saved for each taxon.

```{r}
#| label: TaxonClassification scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/TaxonClassification.png"
  )
)
```

```{r}
#| label: taxa classification plot
data_classification_raw <-
  dplyr::tbl(con, "TaxonClassification") %>%
  dplyr::distinct(
    taxon_species,
    taxon_genus,
    taxon_family
  ) %>%
  dplyr::collect()

n_taxa_per_class <-
  tibble::tribble(
    ~class, ~N,
    "species", length(unique(data_classification_raw$taxon_species)),
    "genus", length(unique(data_classification_raw$taxon_genus)),
    "family", length(unique(data_classification_raw$taxon_family)),
  )


n_taxa_per_class %>%
  dplyr::arrange(-N) %>%
  dplyr::mutate(
    class = factor(
      class,
      levels = unique(class)
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = class
    )
  ) +
  ggplot2::labs(
    title = "Taxa classification",
    x = "",
    y = "Number of taxa"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = class,
      xend = class,
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = class
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )

```

## Traits

Functional traits of vegetation taxa follow the same structure of *Dataset* and *Samples* obtained directly from *Dataset Source-types*.

```{r}
#| label: Traits scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/Traits.png"
  )
)
```

### Trait domain

As there are many varying names for the same "traits", the **Vegvault** database contains *Trait Domain* information to group traits together.  

```{r}
#| label: TraitsDomain scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/TraitsDomain.png"
  )
)
```

There are currently 6 trait domains following the [Diaz et al. (2016)](https://www.nature.com/articles/nature16489)

```{r}
#| label: show trait domains
dplyr::tbl(con, "TraitsDomain") %>%
  dplyr::distinct(trait_domain_name) %>%
  dplyr::collect() %>%
  rlang::set_names(
    nm = "Trait domain"
  ) %>%
  tinytable::tt()
```

```{r}
#| label: trait per domain plot

n_traits_per_domain <-
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsDomain"),
    dplyr::tbl(con, "Traits"),
    by = "trait_domain_id"
  ) %>%
  dplyr::distinct(trait_domain_name, trait_name) %>%
  dplyr::group_by(trait_domain_name) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

n_traits_per_domain %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = trait_domain_name
    )
  ) +
  ggplot2::labs(
    title = "Trait domains",
    x = "",
    y = "Number of traits"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = trait_domain_name,
      xend = trait_domain_name,
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = trait_domain_name
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )

```

### Trait Values

To store a trait value, information needs to be linked among *Dataset*, *Sample*, *Taxa*, and *Trait*.

```{r}
#| label: TraitsValue scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/TraitsValue.png"
  )
)
```

```{r}
#| label: trait value occurences plot

n_occurences_per_dommain <-
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsDomain"),
    dplyr::tbl(con, "Traits"),
    by = "trait_domain_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "TraitsValue"),
    by = "trait_id"
  ) %>%
  dplyr::group_by(trait_domain_name) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()



n_occurences_per_dommain %>%
  dplyr::arrange(-N) %>%
  dplyr::mutate(
    trait_domain_name = factor(
      trait_domain_name,
      levels = unique(trait_domain_name)
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = trait_domain_name
    )
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Occurences of trait values",
    x = "",
    y = "Number of occurrences (values)"
  ) +
  ggplot2::guides(
    fill = "none"
  ) +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = trait_domain_name,
      xend = trait_domain_name,
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = trait_domain_name
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )
```

### Trait reference

For full clarity, on top of *Dataset* and *Sample*, each *Trait* can have additional references.

```{r}
#| label: TraitsReference scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Supplementary_analyses/DB_scheme_visualisation/TraitsReference.png"
  )
)
```

## Abiotic data

# Section III: Assembly details of VegVault 1.0.0

# Section IV: Examples of usage

## Example 1: 

## Example 2: 

## Example 3: 

# Section V: Outlook and future directions