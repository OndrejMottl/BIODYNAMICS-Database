---
title: "Section II: Overview of VegVault 1.0.0"
format:
  html:
    fig-width: 10
  gfm:
    fig-width: 10
editor: 
  markdown: 
    wrap: sentence
---
```{r}
#| label: source config
#| include: FALSE
#| results: 'hide'
#| warning: FALSE
#| message: FALSE

library(here)

here::i_am("R/03_Technical_overview/_02_section_II_datasets.qmd")

# Load configuration
source(
  here::here(
    "R/00_Config_file.R"
  )
)

source(
  here::here(
    "R/03_Technical_overview/00_Config_quarto.R"
  )
)

invisible(
  lapply(
    list.files(
      path = here::here("R/Functions"),
      pattern = "*.R",
      recursive = TRUE,
      full.names = TRUE
    ),
    source
  )
)
```

The database is structured in several logical levels, such as `Dataset`, `Sample`, `Taxa`, `Trait`, etc. 

## Dataset

`Dataset` represents the highest levels in the hierarchy. It is the main keystone in the VegVault structure. 

```{r}
#| label: Dataset scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/Datasets.png"
  )
)
```

### Dataset Type

`dataset_type_id` defines the basic type of a dataset. This is the highest level of classification of the data

Currently, there **VegVault** consist of those types:

* **vegetation_plot** -  current vegetation plot dataset
* **fossil_pollen_archive** - past vegetation plot dataset
* **traits** - dataset containing functional traits
* **gridpoints** - artificially created dataset to hold abiotic data 

```{r}
#| label: Dataset Type scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/DatasetTypeID.png"
  )
)
```

```{r}
#| label: Dataset type - plots
n_datasetes_per_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

plot_waffle(
  n_datasetes_per_type,
  dataset_type,
  plot_title = "Datasets type",
  one_point_is = 1e3
) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  )

plot_waffle(
  n_datasetes_per_type %>%
    dplyr::filter(dataset_type != "gridpoints"),
  dataset_type,
  plot_title = "Datasets type - no gridpoints",
  one_point_is = 1e3
) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  )

n_datasetes_per_type %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = reorder(dataset_type, -N)
    )
  ) +
  ggplot2::scale_y_continuous(
    trans = "log10",
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Datasets type",
    x = "",
    y = "Number of datasets"
  ) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  ) +
  ggplot2::theme(
    legend.position = "none"
  ) +
  ggplot2::geom_segment(
    ggplot2::aes(
      xend = dataset_type,
      yend = 0
    ),
    color = "grey"
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = dataset_type
    ),
    size = 3,
    shape = 21,
    col = "black",
  ) +
  ggplot2::geom_label(
    ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3
  )
```

### Dataset Source-Type

`dataset_source_type_id` defines the general provider of the dataset. This should help to classify, which data pipeline was used to import the dataset into the **VegVault**, This is also the first general point of reference of data, as all large databases have a citation statement.

Currently, the **VegVault** consist of those source-types:

* **BIEN** - [Botanical Information and Ecology Network](https://bien.nceas.ucsb.edu/bien/)
* **sPlotOpen** - [The open-access version of sPlot](https://idiv-biodiversity.de/en/splot/splotopen.html)
* **TRY** - [TRY Plant Trait Database](https://www.try-db.org/TryWeb/Home.php)
* **FOSSILPOL** - [The workflow that aims to process and standardise global palaeoecological pollen data](https://hope-uib-bio.github.io/FOSSILPOL-website/) 
* **gridpoints** - artificially created dataset to hold abiotic data 

```{r}
#| label: Dataset Source Type scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/DatasetSourceTypeID.png"
  )
)
```

```{r}
#| label: dataset source type - plots
n_datasetes_per_source_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetSourceTypeID"),
    by = "data_source_type_id"
  ) %>%
  dplyr::group_by(dataset_source_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

plot_waffle(
  n_datasetes_per_source_type,
  dataset_source_type,
  plot_title = "Datasets source type",
  one_point_is = 1e3
) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_source_type
  )

plot_waffle(
  n_datasetes_per_source_type %>%
    dplyr::filter(
      dataset_source_type != "gridpoints"
    ),
  dataset_source_type,
  plot_title = "Datasets source type - no gridpoints",
  one_point_is = 1e3
) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_source_type
  )

n_datasetes_per_type_per_source_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourceTypeID"),
    by = "data_source_type_id"
  ) %>%
  dplyr::group_by(dataset_type, dataset_source_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

p_n_datasetes_per_type_per_source_type <-
  n_datasetes_per_type_per_source_type %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::mutate(
    n_datasetes_per_type = sum(N)
  ) %>%
  dplyr::ungroup() %>%
  dplyr::arrange(-n_datasetes_per_type, -N) %>%
  dplyr::mutate(
    dataset_type = factor(
      dataset_type,
      levels = unique(dataset_type)
    ),
    dataset_source_type = factor(
      dataset_source_type,
      levels = unique(dataset_source_type)
    )
  ) %>%
  ggplot2::ggplot(
    ggplot2::aes(
      y = N,
      x = dataset_source_type # reorder(dataset_source_type, -N)
    )
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Datasets type per source type",
    x = "",
    y = "Number of datasets"
  ) +
  ggplot2::theme(
    legend.position = "none",
    strip.text = ggplot2::element_text(colour = "white")
  ) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_source_type
  ) +
  ggplot2::facet_wrap(~dataset_type, nrow = 1, scales = "free_x") +
  ggplot2::geom_segment(
    mapping = ggplot2::aes(
      x = dataset_source_type, # reorder(dataset_source_type, -N),
      xend = dataset_source_type, # reorder(dataset_source_type, -N),
      yend = 0
    ),
    color = "grey",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      fill = dataset_source_type
    ),
    size = 3,
    shape = 21,
    col = "black",
    position = ggplot2::position_dodge(0.5)
  ) +
  ggplot2::geom_label(
    mapping = ggplot2::aes(
      label = scales::number(N)
    ),
    vjust = -0.5,
    size = 3,
    position = ggplot2::position_dodge(0.5)
  )

color_facets(
  sel_plot = p_n_datasetes_per_type_per_source_type,
  # need to manually sort the colors due to previous reorder
  sel_palette = c(
    palette_dataset_type["gridpoints"],
    palette_dataset_type["traits"],
    palette_dataset_type["vegetation_plot"],
    palette_dataset_type["fossil_pollen_archive"]
  ),
  direction = "horizontal"
)
```

### Dataset Source

Each individual dataset from a specific *Data Source-Type* can have information on the source of the data (i.e. sub-database). This should help to promote better findability of the primary source of data and referencing.

```{r}
#| label: Dataset Source ID scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/DatasetSourcesID.png"
  )
)
```

```{r}
#| label: Dataset ID
n_dataset_sources <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourcesID"),
    by = "data_source_id"
  ) %>%
  dplyr::distinct(dataset_type, data_source_desc) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

n_total_sources <-
  sum(n_dataset_sources$N)

n_datasetes_per_source <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourcesID"),
    by = "data_source_id"
  ) %>%
  dplyr::group_by(dataset_type, data_source_desc) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup() %>%
  tidyr::drop_na(data_source_desc)
```

Currently, there are `r n_total_sources` sources of datasets.

```{r}
#| label: Dataset ID - plots
n_datasetes_per_source %>%
  ggplot2::ggplot(
    ggplot2::aes(
      x = dataset_type,
      y = N,
      fill = dataset_type
    )
  ) +
  ggplot2::geom_violin(
    col = NA
  ) +
  ggplot2::geom_boxplot(
    width = 0.2,
    fill = "white",
    col = "gray50",
    outlier.shape = NA
  ) +
  ggplot2::geom_point(
    data = n_datasetes_per_source %>%
      dplyr::group_by(dataset_type) %>%
      dplyr::summarise(
        N = median(N)
      ),
    mapping = ggplot2::aes(
      fill = dataset_type
    ),
    shape = 22,
    size = 3
  ) +
  ggplot2::scale_y_continuous(
    transform = scales::transform_log10(),
    breaks = scales::trans_breaks("log10", function(x) 10^x),
    labels = scales::trans_format("log10", scales::math_format(10^.x))
  ) +
  ggplot2::labs(
    title = "Number of datasets per Dataset-Type",
    y = "Number of datasets",
    x = ""
  ) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  ) +
  ggplot2::theme(
    legend.position = "none"
  )
```

### Sampling method

Some datasets may differ in the way they have been sampled. This could be represented by different ways vegetation data have been sampled for *Dataset Type* of `vegetation_plot`, or depositional environment for *Dataset Type* of `fossil_pollen_archive`.

```{r}
#| label: Dataset Sampling method scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/SamplingMethodID.png"
  )
)
```

```{r}
#| label: Dataset Sampling method - plots
n_sampling_methods_per_dataset_type <-
  dplyr::inner_join(
    dplyr::tbl(con, "Datasets"),
    dplyr::tbl(con, "SamplingMethodID"),
    by = "sampling_method_id"
  ) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetTypeID"),
    by = "dataset_type_id"
  ) %>%
  dplyr::distinct(dataset_type, sampling_method_details) %>%
  dplyr::group_by(dataset_type) %>%
  dplyr::count(name = "N") %>%
  dplyr::collect() %>%
  dplyr::ungroup()

plot_waffle(
  n_sampling_methods_per_dataset_type,
  dataset_type,
  plot_title = "Number of Sampling method per Datasets type",
  one_point_is = 1
) +
  ggplot2::scale_fill_manual(
    values = palette_dataset_type
  )
```

### References

*Dataset Source-Type*, *Dataset Source*, and *Sampling Method* can have their own references. Moreover, each dataset can have one or more references directly to that specific data.

```{r}
#| label: Dataset reference method scheme structure
knitr::include_graphics(
  here::here(
    "R/03_Technical_overview/DB_scheme_visualisation/DatasetReference.png"
  )
)
```

This means that one dataset can have one/several references from each of those parts. Let's take a look at an example, of what that could mean in practice.

```{r}
#| label: Dataset reference example
dataset_ref_example <-
  dplyr::tbl(con, "Datasets") %>%
  dplyr::filter(dataset_id == sel_dataset_for_example) %>%
  dplyr::inner_join(
    dplyr::tbl(con, "DatasetSourceTypeReference"),
    by = "data_source_type_id"
  ) %>%
  dplyr::left_join(
    dplyr::tbl(con, "References"),
    by = "reference_id"
  ) %>%
  dplyr::rename(
    source_type_ref = reference_detail
  ) %>%
  dplyr::select(-reference_id) %>%
  dplyr::left_join(
    dplyr::tbl(con, "SamplingMethodReference"),
    by = "sampling_method_id"
  ) %>%
  dplyr::left_join(
    dplyr::tbl(con, "References"),
    by = "reference_id"
  ) %>%
  dplyr::rename(
    sampling_method_ref = reference_detail
  ) %>%
  dplyr::select(-reference_id) %>%
  dplyr::left_join(
    dplyr::tbl(con, "DatasetSourcesReference"),
    by = "data_source_id"
  ) %>%
  dplyr::left_join(
    dplyr::tbl(con, "References"),
    by = "reference_id"
  ) %>%
  dplyr::rename(
    source_ref = reference_detail
  ) %>%
  dplyr::select(-reference_id) %>%
  dplyr::collect()

```

We have selected dataset ID: `r as.character(sel_dataset_for_example)`, which is a fossil pollen archive. Therefore, it has the reference of the *Dataser Source-Type*: *`r dataset_ref_example$source_type_ref`* and reference for the individual dataset: *`r dataset_ref_example$source_ref`*